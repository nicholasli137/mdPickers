{"version":3,"sources":["mdPickers.min.js"],"names":["TimePickerCtrl","$scope","$mdDialog","time","autoSwitch","$mdMedia","self","this","VIEW_HOURS","VIEW_MINUTES","currentView","moment","clockHours","parseInt","format","clockMinutes","minutes","switchView","setAM","hours","hour","setPM","cancel","confirm","hide","toDate","ClockCtrl","TYPE_HOURS","TYPE_MINUTES","STEP_DEG","steps","CLOCK_TYPES","range","getPointerStyle","divider","type","degrees","Math","round","selected","-webkit-transform","-ms-transform","transform","setTimeByDeg","deg","setTime","init","i","push","DatePickerCtrl","$timeout","currentDate","options","date","minDate","isValid","maxDate","displayFormat","dateFilter","angular","isFunction","selectingYear","isBefore","add","isAfter","yearItems","currentIndex_","PAGE_SIZE","START","year","END","getItemAtIndex","index","getLength","min","floor","abs","selectYear","animate","showYear","yearTopIndex","showCalendar","animating","noop","then","CalendarCtrl","dow","localeData","firstDayOfWeek","weekDays","concat","weekdaysMin","slice","daysInMonth","getDaysInMonth","days","firstDay","day","length","arr","value","enabled","isDayEnabled","selectDate","dom","nextMonth","prevMonth","subtract","updateDaysInMonth","$watch","unix","newValue","oldValue","formatValidator","num","console","log","isDate","minDateValidator","isSameOrAfter","maxDateValidator","isSameOrBefore","filterValidator","filter","module","config","$mdIconProvider","mdpIconsRegistry","forEach","icon","id","url","run","$templateCache","put","svg","constant","directive","$mdUtil","restrict","priority","compile","element","inputContainer","getClosest","toggleClass","$animate","bindToController","replace","template","controller","controllerAs","link","scope","attrs","ctrl","timepickerCtrl","querySelector","$parent","timepicker","onEvent","event","containerCoords","currentTarget","getClientRects","x","offsetWidth","pageX","left","y","pageY","top","offsetHeight","atan2","PI","indexOf","on","e","off","$on","provider","LABEL_OK","LABEL_CANCEL","setOKButtonLabel","label","setCancelButtonLabel","$get","timePicker","Date","now","isObject","show","clickOutsideToClose","targetEvent","locals","skipHide","$mdpTimePicker","require","transclude","noFloat","isDefined","mdpNoFloat","placeholder","mdpPlaceholder","openOnClick","mdpOpenOnClick","mdpDisabled","timeFormat","disabled","ngModel","$transclude","updateInputElement","inputElement","inputContainerCtrl","setHasValue","$isEmpty","updateTime","strValue","$setViewValue","$pristine","messages","hasClass","removeClass","$render","onInputElementEvents","target","$viewVaue","clone","append","$error","setInvalid","Object","keys","$formatters","unshift","$validators","modelValue","viewValue","required","isUndefined","$parsers","parsed","$modelValue","originalModel","seconds","showPicker","ev","DISPLAY_FORMAT","setDisplayFormat","datePicker","animElements","map","a","direction","addClass","$mdpDatePicker","dateFormat","acceptableDateFormat","pre","post","updateDate","model","isError","$invalid","month"],"mappings":"CAAA,WACA,YA8DA,SAASA,GAAeC,EAAQC,EAAWC,EAAMC,EAAYC,GAC5D,GAAIC,GAAOC,IACRA,MAAKC,WAAa,EAClBD,KAAKE,aAAe,EACpBF,KAAKG,YAAcH,KAAKC,WACxBD,KAAKJ,KAAOQ,OAAOR,GACnBI,KAAKH,aAAeA,EAEpBG,KAAKK,WAAaC,SAASN,KAAKJ,KAAKW,OAAO,MAC5CP,KAAKQ,aAAeF,SAASN,KAAKJ,KAAKa,WAE1Cf,EAAOI,SAAWA,EAElBE,KAAKU,WAAa,WACdX,EAAKI,YAAcJ,EAAKI,aAAeJ,EAAKE,WAAaF,EAAKG,aAAeH,EAAKE,YAGtFD,KAAKW,MAAQ,WACHZ,EAAKH,KAAKgB,SAAW,IACpBb,EAAKH,KAAKiB,KAAKd,EAAKH,KAAKiB,OAAS,KAG1Cb,KAAKc,MAAQ,WACNf,EAAKH,KAAKgB,QAAU,IACnBb,EAAKH,KAAKiB,KAAKd,EAAKH,KAAKiB,OAAS,KAG1Cb,KAAKe,OAAS,WACVpB,EAAUoB,UAGdf,KAAKgB,QAAU,WACXrB,EAAUsB,KAAKjB,KAAKJ,KAAKsB,WAIjC,QAASC,GAAUzB,GACf,GAAI0B,GAAa,QACbC,EAAe,UACftB,EAAOC,IAEXA,MAAKsB,SAAW,GAChBtB,KAAKuB,SAELvB,KAAKwB,aACDZ,OACIa,MAAO,IAEXhB,SACIgB,MAAO,KAIfzB,KAAK0B,gBAAkB,WACnB,GAAIC,GAAU,CACd,QAAO5B,EAAK6B,MACR,IAAKR,GACDO,EAAU,EACV,MACJ,KAAKN,GACDM,EAAU,GAGlB,GAAIE,GAAUC,KAAKC,MAAMhC,EAAKiC,UAAY,IAAML,IAAY,GAC5D,QACIM,oBAAqB,UAAYJ,EAAU,OAC3CK,gBAAiB,UAAYL,EAAU,OACvCM,UAAa,UAAYN,EAAU,SAI3C7B,KAAKoC,aAAe,SAASC,GACzBA,EAAMA,GAAO,IAAM,EAAIA,CACvB,IAAIV,GAAU,CACd,QAAO5B,EAAK6B,MACR,IAAKR,GACDO,EAAU,EACV,MACJ,KAAKN,GACDM,EAAU,GAIlB5B,EAAKuC,QACDR,KAAKC,MAAMJ,EAAU,IAAMU,KAInCrC,KAAKsC,QAAU,SAAS1C,EAAMgC,GAG1B,OAFA5B,KAAKgC,SAAWpC,EAETG,EAAK6B,MACR,IAAKR,GAC2B,MAAzBrB,EAAKH,KAAKW,OAAO,OAAcX,GAAQ,IAC1CI,KAAKJ,KAAKgB,MAAMhB,EAChB,MACJ,KAAKyB,GACEzB,EAAO,KAAIA,GAAQ,IACtBI,KAAKJ,KAAKa,QAAQb,KAM9BI,KAAKuC,KAAO,WAER,OADAxC,EAAK6B,KAAO7B,EAAK6B,MAAQ,QAClB7B,EAAK6B,MACR,IAAKR,GACD,IAAI,GAAIoB,GAAI,EAAGA,GAAK,GAAIA,IACpBzC,EAAKwB,MAAMkB,KAAKD,EACpBzC,GAAKiC,SAAWjC,EAAKH,KAAKgB,SAAW,EAClCb,EAAKiC,SAAW,KAAIjC,EAAKiC,UAAY,GAExC,MACJ,KAAKX,GACD,IAAI,GAAImB,GAAI,EAAGA,GAAK,GAAIA,GAAG,EACvBzC,EAAKwB,MAAMkB,KAAKD,EACpBzC,GAAKwB,MAAMkB,KAAK,GAChB1C,EAAKiC,SAAWjC,EAAKH,KAAKa,WAAa,IAMnDT,KAAKuC,OAgRT,QAASG,GAAehD,EAAQC,EAAWG,EAAU6C,EAAUC,EAAaC,GACxE,GAAI9C,GAAOC,IAEXA,MAAK8C,KAAO1C,OAAOwC,GACnB5C,KAAK+C,QAAUF,EAAQE,SAAW3C,OAAOyC,EAAQE,SAASC,UAAY5C,OAAOyC,EAAQE,SAAW,KAChG/C,KAAKiD,QAAUJ,EAAQI,SAAW7C,OAAOyC,EAAQI,SAASD,UAAY5C,OAAOyC,EAAQI,SAAW,KAChGjD,KAAKkD,cAAgBL,EAAQK,eAAiB,cAC9ClD,KAAKmD,WAAaC,QAAQC,WAAWR,EAAQM,YAAcN,EAAQM,WAAa,KAChFnD,KAAKsD,eAAgB,EAGpBtD,KAAK+C,SAAW/C,KAAKiD,SACpBjD,KAAKiD,QAAQM,SAASvD,KAAK+C,WAC9B/C,KAAKiD,QAAU7C,OAAOJ,KAAK+C,SAASS,IAAI,EAAG,SAIzCxD,KAAK8C,OAED9C,KAAK+C,SAAW/C,KAAK8C,KAAKS,SAASvD,KAAK+C,WAC9C/C,KAAK8C,KAAO1C,OAAOJ,KAAK+C,UAIlB/C,KAAKiD,SAAWjD,KAAK8C,KAAKW,QAAQzD,KAAKiD,WAC7CjD,KAAK8C,KAAO1C,OAAOJ,KAAKiD,WAI1BjD,KAAK0D,WACEC,cAAe,EACfC,UAAW,EACXC,MAAQ9D,EAAKgD,QAAUhD,EAAKgD,QAAQe,OAAS,KAC7CC,IAAMhE,EAAKkD,QAAUlD,EAAKkD,QAAQa,OAAS,EAC3CE,eAAgB,SAASC,GAIxB,MAHGjE,MAAK2D,cAAgBM,IACjBjE,KAAK2D,cAAgBM,GAErBjE,KAAK6D,MAAQI,GAErBC,UAAW,WACP,MAAOpC,MAAKqC,IACRnE,KAAK2D,cAAgB7B,KAAKsC,MAAMpE,KAAK4D,UAAY,GACjD9B,KAAKuC,IAAIrE,KAAK6D,MAAQ7D,KAAK+D,KAAO,KAK9CrE,EAAOI,SAAWA,EAClBJ,EAAOoE,KAAO9D,KAAK8C,KAAKgB,OAE3B9D,KAAKsE,WAAa,SAASR,GACpB/D,EAAK+C,KAAKgB,KAAKA,GACfpE,EAAOoE,KAAOA,EACd/D,EAAKuD,eAAgB,EACrBvD,EAAKwE,WAGTvE,KAAKwE,SAAW,WACZzE,EAAK0E,aAAgB1E,EAAK+C,KAAKgB,OAAS/D,EAAK2D,UAAUG,MAAS/B,KAAKsC,MAAMrE,EAAK2D,UAAUE,UAAY,GACtG7D,EAAK2D,UAAUC,cAAiB5D,EAAK+C,KAAKgB,OAAS/D,EAAK2D,UAAUG,MAAS,EAC3E9D,EAAKuD,eAAgB,GAGzBtD,KAAK0E,aAAe,WAChB3E,EAAKuD,eAAgB,GAGzBtD,KAAKe,OAAS,WACVpB,EAAUoB,UAGdf,KAAKgB,QAAU,WACd,GAAI8B,GAAO9C,KAAK8C,IAEZ9C,MAAK+C,SAAW/C,KAAK8C,KAAKS,SAASvD,KAAK+C,WAC3CD,EAAO1C,OAAOJ,KAAK+C,UAGhB/C,KAAKiD,SAAWjD,KAAK8C,KAAKW,QAAQzD,KAAKiD,WAC1CH,EAAO1C,OAAOJ,KAAKiD,UAGjBtD,EAAUsB,KAAK6B,EAAK5B,WAGxBlB,KAAKuE,QAAU,WACXxE,EAAK4E,WAAY,EACjBhC,EAASS,QAAQwB,MAAMC,KAAK,WACxB9E,EAAK4E,WAAY,KAuE7B,QAASG,GAAapF,GACrB,GAAIK,GAAOC,IACXA,MAAK+E,IAAM3E,OAAO4E,aAAaC,iBAE5BjF,KAAKkF,YAAcC,OACf/E,OAAOgF,cAAcC,MACjBrF,KAAK+E,KAET3E,OAAOgF,cAAcC,MACjB,EACArF,KAAK+E,MAIb/E,KAAKsF,eAELtF,KAAKuF,eAAiB,WAClB,GAAIC,GAAOzF,EAAK+C,KAAKwC,cACjBG,EAAWrF,OAAOL,EAAK+C,MAAMA,KAAK,GAAG4C,MAAQ1F,KAAK+E,GAEnDU,GAAW,IAAGA,EAAWzF,KAAKkF,SAASS,OAAS,EAInD,KAAI,GADAC,MACIpD,EAAI,EAAGA,GAAMiD,EAAWD,EAAOhD,IAAK,CACxC,GAAIkD,GAAM,IACPlD,GAAIiD,IACHC,GACIG,MAAQrD,EAAIiD,EACZK,QAAS/F,EAAKgG,aAAa3F,OAAOL,EAAK+C,MAAMA,KAAKN,EAAIiD,GAAUvE,YAGxE0E,EAAInD,KAAKiD,GAGb,MAAOE,IAGX5F,KAAK+F,aAAe,SAASL,GACzB,QAAS1F,KAAK+C,WAAW/C,KAAK+C,SAAW2C,IACnC1F,KAAKiD,WAAWjD,KAAKiD,SAAWyC,IAChC3F,EAAKoD,YAAepD,EAAKoD,WAAWuC,KAG9C1F,KAAKgG,WAAa,SAASC,GACvBlG,EAAK+C,KAAKA,KAAKmD,IAGnBjG,KAAKkG,UAAY,WACbnG,EAAK+C,KAAKU,IAAI,EAAG,WAGrBxD,KAAKmG,UAAY,WACbpG,EAAK+C,KAAKsD,SAAS,EAAG,WAG1BpG,KAAKqG,kBAAoB,WACrBtG,EAAKuF,YAAcvF,EAAKwF,kBAG5B7F,EAAO4G,OAAO,WAAa,MAAQvG,GAAK+C,KAAKyD,QAAU,SAASC,EAAUC,GACnED,GAAYA,IAAaC,GACxB1G,EAAKsG,sBAGbtG,EAAKsG,oBA0DT,QAASK,GAAgBb,EAAOtF,EAAQoG,GAEpC,MADAC,SAAQC,IAAI,kBAAmBhB,EAAOtF,EAAQoG,IACtCd,GAASzC,QAAQ0D,OAAOjB,IAAUzF,OAAOyF,EAAOtF,GAAQ,GAAMyC,UAG1E,QAAS+D,GAAiBlB,EAAOtF,EAAQwC,GACrC,GAAIA,GAAU3C,OAAO2C,EAAS,cAAc,GACxCD,EAAOM,QAAQ0D,OAAOjB,GAASzF,OAAOyF,GAAUzF,OAAOyF,EAAOtF,GAAQ,EAE1E,QAAQsF,GACAzC,QAAQ0D,OAAOjB,KACd9C,EAAQC,WACTF,EAAKkE,cAAcjE,GAG/B,QAASkE,GAAiBpB,EAAOtF,EAAQ0C,GACrC,GAAIA,GAAU7C,OAAO6C,EAAS,cAAc,GACxCH,EAAOM,QAAQ0D,OAAOjB,GAASzF,OAAOyF,GAAUzF,OAAOyF,EAAOtF,GAAQ,EAE1E,QAAQsF,GACAzC,QAAQ0D,OAAOjB,KACd5C,EAAQD,WACTF,EAAKoE,eAAejE,GAGhC,QAASkE,GAAgBtB,EAAOtF,EAAQ6G,GACpC,GAAItE,GAAOM,QAAQ0D,OAAOjB,GAASzF,OAAOyF,GAAUzF,OAAOyF,EAAOtF,GAAQ,EAE1E,QAAQsF,GACAzC,QAAQ0D,OAAOjB,KACdzC,QAAQC,WAAW+D,KACnBA,EAAOtE,GAjwBpB,GAAIuE,GAASjE,QAAQiE,OAAO,aAC3B,aACA,YACA,UAGDA,GAAOC,QAAQ,kBAAmB,mBAAoB,SAASC,EAAiBC,GAC/EpE,QAAQqE,QAAQD,EAAkB,SAASE,EAAMzD,GAChDsD,EAAgBG,KAAKA,EAAKC,GAAID,EAAKE,UAIrCP,EAAOQ,KAAK,iBAAkB,mBAAoB,SAASC,EAAgBN,GAC1EpE,QAAQqE,QAAQD,EAAkB,SAASE,EAAMzD,GAChD6D,EAAeC,IAAIL,EAAKE,IAAKF,EAAKM,UAGpCX,EAAOY,SAAS,qBAERN,GAAI,mBACJC,IAAK,uBACLI,IAAK,4LAGLL,GAAI,oBACJC,IAAK,wBACLI,IAAK,6LAGLL,GAAI,kBACJC,IAAK,sBACLI,IAAK,kVAGLL,GAAI,YACJC,IAAK,gBACLI,IAAK,wRAGbX,EAAOa,UAAU,aAAc,UAAW,SAASC,GAChD,OACKC,SAAU,KACVC,SAAU,IACVC,QAAS,SAASC,GACd,GAAIC,GAAiBL,EAAQM,WAAWF,EAAS,mBAAmB,IAC/CJ,EAAQM,WAAWF,EAAS,mBAAmB,EAGpE,IAAKC,EAKL,MAFAD,GAAQG,YAAY,8BAA8B,WAuI9DrB,EAAOa,UAAU,YAAa,WAAY,WAAY,SAASS,EAAUhG,GACrE,OACIyF,SAAU,IACVQ,kBACIhH,KAAQ,KACRhC,KAAQ,IACRC,WAAc,MAElBgJ,SAAS,EACTC,SAAU,khBASVC,YAAa,SAAU5H,GACvB6H,aAAc,QACdC,KAAM,SAASC,EAAOX,EAASY,EAAOC,GAClC,GACIC,IADUjG,QAAQmF,QAAQA,EAAQ,GAAGe,cAAc,iBAClCJ,EAAMK,QAAQC,YAE/BC,EAAU,SAASC,GACnB,GAAIC,GAAkBD,EAAME,cAAcC,iBAAiB,GACvDC,EAAMJ,EAAME,cAAcG,YAAc,GAAML,EAAMM,MAAQL,EAAgBM,MAC5EC,EAAMR,EAAMS,MAAQR,EAAgBS,IAAQV,EAAME,cAAcS,aAAe,EAE/EhI,EAAMP,KAAKC,MAAOD,KAAKwI,MAAMR,EAAGI,IAAM,IAAMpI,KAAKyI,IACrD5H,GAAS,WACLyG,EAAKhH,aAAaC,EAAM,KACrB+G,EAAKvJ,aAAe,UAAW,SAAS2K,QAAQd,EAAM9H,YAAgByH,GAAgBA,EAAe3I,eAIhH6H,GAAQkC,GAAG,YAAa,WACrBlC,EAAQkC,GAAG,YAAahB,KAG3BlB,EAAQkC,GAAG,UAAW,SAASC,GAC3BnC,EAAQoC,IAAI,eAGhBpC,EAAQkC,GAAG,QAAShB,GACpBP,EAAM0B,IAAI,WAAY,WAClBrC,EAAQoC,IAAI,QAASlB,GACrBlB,EAAQoC,IAAI,YAAalB,UAMzCpC,EAAOwD,SAAS,iBAAkB,WAC9B,GAAIC,GAAW,KACXC,EAAe,QAEnB/K,MAAKgL,iBAAmB,SAASC,GAC7BH,EAAWG,GAGfjL,KAAKkL,qBAAuB,SAASD,GACjCF,EAAeE,GAGnBjL,KAAKmL,MAAQ,YAAa,SAASxL,GAC/B,GAAIyL,GAAa,SAASxL,EAAMiD,GAI5B,MAHIO,SAAQ0D,OAAOlH,KAAOA,EAAOyL,KAAKC,OACjClI,QAAQmI,SAAS1I,KAAUA,MAEzBlD,EAAU6L,MACbzC,YAAc,SAAU,YAAa,OAAQ,aAAc,WAAYtJ,GACvEuJ,aAAc,aACdyC,qBAAqB,EACrB3C,SAAU,68CAoByEiC,EAAe,KAAOA,EAAe,yFACjBD,EAAW,KAAOA,EAAW,yEAKpIY,YAAa7I,EAAQ6I,YACrBC,QACI/L,KAAMA,EACNC,WAAYgD,EAAQhD,YAExB+L,UAAU,IAIlB,OAAOR,OAIf/D,EAAOa,UAAU,iBAAkB,iBAAkB,WAAY,SAAS2D,EAAgBlJ,GACtF,OACIyF,SAAU,IACV0D,QAAS,UACTC,YAAY,EACZjD,SAAU,SAASP,EAASY,GACxB,GAAI6C,GAAU5I,QAAQ6I,UAAU9C,EAAM+C,YAClCC,EAAc/I,QAAQ6I,UAAU9C,EAAMiD,gBAAkBjD,EAAMiD,eAAiB,GAC/EC,IAAcjJ,QAAQ6I,UAAU9C,EAAMmD,eAE1C,OAAO,0GACsElJ,QAAQ6I,UAAU9C,EAAMoD,aAAe,0BAA4B,IAAM,qFAGrHP,EAAU,eAAiB,IAAM,uDACtB5I,QAAQ6I,UAAU9C,EAAMoD,aAAe,0BAA4B,IAAM,gBAAkBJ,EAAc,kBAAoBA,EAAc,KAAOE,EAAc,kCAAoC,IAAM,kCAI1PnD,OACIsD,WAAc,aACdL,YAAe,kBACftM,WAAc,kBACd4M,SAAY,iBAEhBxD,KAAM,SAASC,EAAOX,EAASY,EAAOuD,EAASC,GAqD3C,QAASC,GAAmB/G,GACxBgH,EAAa,GAAGhH,MAAQA,EACxBiH,EAAmBC,aAAaL,EAAQM,SAASnH,IAGrD,QAASoH,GAAWrN,GAChB,GAAIiG,GAAQzF,OAAOR,EAAMwD,QAAQ0D,OAAOlH,GAAQ,KAAOsJ,EAAMsD,YAAY,GACrEU,EAAWrH,EAAMtF,OAAO2I,EAAMsD,WAE/B3G,GAAM7C,WACL4J,EAAmBM,GACnBR,EAAQS,cAAcD,KAEtBN,EAAmBhN,GACnB8M,EAAQS,cAAcvN,KAGtB8M,EAAQU,WACRC,EAASC,SAAS,iBAClB9E,EAAe8E,SAAS,qBAAqBD,EAASE,YAAY,gBAEtEb,EAAQc,UAYZ,QAASC,GAAqB/D,GACvBA,EAAMgE,OAAO7H,QAAU6G,EAAQiB,WAC9BV,EAAWvD,EAAMgE,OAAO7H,OAvFhC,GAAIgH,GAAezJ,QAAQmF,QAAQA,EAAQ,GAAGe,cAAc,UACxDd,EAAiBpF,QAAQmF,QAAQA,EAAQ,GAAGe,cAAc,uBAC1DwD,EAAqBtE,EAAeO,WAAW,mBAEnD4D,GAAY,SAASiB,GAClBpF,EAAeqF,OAAOD,IAGzB,IAAIP,GAAWjK,QAAQmF,QAAQC,EAAe,GAAGc,cAAc,iBAE/DJ,GAAMtH,KAAOsH,EAAMsD,WAAa,OAAS,OACzCtD,EAAMsD,WAAatD,EAAMsD,YAAc,QACvCtD,EAAMrJ,WAAaqJ,EAAMrJ,aAAc,EAEvCqJ,EAAM5C,OAAO,WAAa,MAAOoG,GAAQoB,QAAU,SAAStH,EAAUC,GAClEqG,EAAmBiB,YAAYrB,EAAQU,aAAeY,OAAOC,KAAKvB,EAAQoB,QAAQnI,UACnF,GAGH+G,EAAQwB,YAAYC,QAAQ,SAAStI,GACjC,GAAIjG,GAAOwD,QAAQ0D,OAAOjB,IAAUzF,OAAOyF,EAEvC+G,GADDhN,GAAQA,EAAKoD,UACOpD,EAAKW,OAAO2I,EAAMsD,YAElB,QAG3BE,EAAQ0B,YAAY7N,OAAS,SAAS8N,EAAYC,GAC9C,OAAQA,GAAalL,QAAQ0D,OAAOwH,IAAclO,OAAOkO,EAAWpF,EAAMsD,YAAY,GAAMxJ,WAGhG0J,EAAQ0B,YAAYG,SAAW,SAASF,EAAYC,GAChD,MAAOlL,SAAQoL,YAAYrF,EAAMoF,YAAc7B,EAAQM,SAASqB,KAAgB3B,EAAQM,SAASsB,IAGrG5B,EAAQ+B,SAASN,QAAQ,SAAStI,GAC9B,GAAI6I,GAAStO,OAAOyF,EAAOqD,EAAMsD,YAAY,EAC7C,IAAGkC,EAAO1L,UAAW,CACjB,GAAGI,QAAQ0D,OAAO4F,EAAQiC,aAAc,CACpC,GAAIC,GAAgBxO,OAAOsM,EAAQiC,YACnCC,GAAcnO,QAAQiO,EAAOjO,WAC7BmO,EAAchO,MAAM8N,EAAO9N,SAC3BgO,EAAcC,QAAQH,EAAOG,WAE7BH,EAASE,EAEb,MAAOF,GAAOxN,SAEd,MAAO,QA4BfgI,EAAM4F,WAAa,SAASC,GACxBlD,EAAea,EAAQiC,aACnBjD,YAAaqD,EACblP,WAAYqJ,EAAMrJ,aACnBgF,KAAK,SAASjF,GACbqN,EAAWrN,GAAM,MASzBiN,EAAapC,GAAG,mBAAoBgD,GAEpCvE,EAAM0B,IAAI,WAAY,WAClBiC,EAAalC,IAAI,mBAAoB8C,UAMrDpG,EAAOa,UAAU,iBAAkB,iBAAkB,WAAY,SAAS2D,EAAgBlJ,GACtF,OACIyF,SAAU,IACV0D,QAAS,UACT5C,OACIsD,WAAc,aACd3M,WAAc,mBAElBoJ,KAAM,SAASC,EAAOX,EAASY,EAAOuD,EAASC,GAE3C,QAASmC,GAAWC,GAChBlD,EAAea,EAAQiC,aACnBjD,YAAaqD,EACblP,WAAYqJ,EAAMrJ,aACnBgF,KAAK,SAASjF,GACb8M,EAAQS,cAAc/M,OAAOR,GAAMW,OAAO2I,EAAM3I,SAChDmM,EAAQc,YAPhBtE,EAAM3I,OAAS2I,EAAM3I,QAAU,QAW/BgI,EAAQkC,GAAG,QAASqE,GAEpB5F,EAAM0B,IAAI,WAAY,WAClBrC,EAAQoC,IAAI,QAASmE,UAsGrCzH,EAAOwD,SAAS,iBAAkB,WAC9B,GAAIC,GAAW,KACXC,EAAe,SACfiE,EAAiB,aAErBhP,MAAKiP,iBAAmB,SAAS1O,GAC7ByO,EAAiBzO,GAGrBP,KAAKgL,iBAAmB,SAASC,GAC7BH,EAAWG,GAGfjL,KAAKkL,qBAAuB,SAASD,GACjCF,EAAeE,GAGnBjL,KAAKmL,MAAQ,YAAa,SAASxL,GAC/B,GAAIuP,GAAa,SAAStM,EAAaC,GAMnC,MALKO,SAAQ0D,OAAOlE,KAAcA,EAAcyI,KAAKC,OAChDlI,QAAQmI,SAAS1I,KAAUA,MAEhCA,EAAQK,cAAgB8L,EAEjBrP,EAAU6L,MACbzC,YAAc,SAAU,YAAa,WAAY,WAAY,cAAe,UAAWrG,GACvFsG,aAAc,aACdyC,qBAAqB,EACrB3C,SAAU,09CAmByEiC,EAAe,KAAOA,EAAe,yFACjBD,EAAW,KAAOA,EAAW,yEAKpIY,YAAa7I,EAAQ6I,YACrBC,QACI/I,YAAaA,EACbC,QAASA,GAEb+I,UAAU,IAIlB,OAAOsD,OAwEf7H,EAAOa,UAAU,eAAgB,WAAY,SAASS,GAClD,OACIP,SAAU,IACVQ,kBACI9F,KAAQ,IACRC,QAAW,IACXE,QAAW,IACXE,WAAc,KAElB2F,SAAU,26CAgBVC,YAAa,SAAUjE,GACvBkE,aAAc,WACdC,KAAM,SAASC,EAAOX,EAASY,EAAOC,GAClC,GAAI+F,IACA5G,EAAQ,GAAGe,cAAc,2BACzBf,EAAQ,GAAGe,cAAc,sBACzBf,EAAQ,GAAGe,cAAc,4BAC3B8F,IAAI,SAASC,GACZ,MAAOjM,SAAQmF,QAAQ8G,IAG1BnG,GAAM5C,OAAO,WAAa,MAAQ8C,GAAKtG,KAAKvC,OAAO,WAAa,SAASiG,EAAUC,GAC/E,GAAI6I,GAAY,IAOhB,IALG9I,EAAWC,EACV6I,EAAY,mBACR9I,EAAWC,IACf6I,EAAY,oBAEbA,EACC,IAAI,GAAI9M,KAAK2M,GACTA,EAAa3M,GAAG+M,SAASD,GACzB3G,EAAS4E,YAAY4B,EAAa3M,GAAI8M,UA8C9DjI,EAAOa,UAAU,iBAAkB,iBAAkB,WAAY,SAASsH,EAAgB7M,GACtF,OACIyF,SAAU,IACV0D,QAAS,UACTC,YAAY,EACZjD,SAAU,SAASP,EAASY,GACxB,GAAI6C,GAAU5I,QAAQ6I,UAAU9C,EAAM+C,YAClCC,EAAc/I,QAAQ6I,UAAU9C,EAAMiD,gBAAkBjD,EAAMiD,eAAiB,GAC/EC,IAAcjJ,QAAQ6I,UAAU9C,EAAMmD,eAE1C,OAAO,qDACiBlJ,QAAQ6I,UAAU9C,EAAMoD,aAAe,0BAA4B,IAAM,oIAGhEP,EAAU,eAAiB,IAAM,uDACtB5I,QAAQ6I,UAAU9C,EAAMoD,aAAe,0BAA4B,IAAM,gBAAkBJ,EAAc,kBAAoBA,EAAc,KAAOE,EAAc,kCAAoC,IAAM,kCAI1PnD,OACInG,QAAW,cACXE,QAAW,cACXE,WAAc,iBACdsM,WAAc,aACdC,qBAAwB,uBACxBvD,YAAe,kBACfH,QAAW,cACXK,YAAe,kBACfI,SAAY,iBAEhBxD,MACI0G,IAAK,SAASzG,EAAOX,EAASY,EAAOuD,EAASC,KAG9CiD,KAAM,SAAS1G,EAAOX,EAASY,EAAOuD,EAASC,GAmE3C,QAASC,GAAmB/G,GACxBgH,EAAa,GAAGhH,MAAQA,EACxBiH,EAAmBC,aAAaL,EAAQM,SAASnH,IAGrD,QAASgK,GAAW/M,GAChB,GAAI+C,GAAQzF,OAAO0C,EAAMM,QAAQ0D,OAAOhE,GAAQ,KAAOoG,EAAMuG,YAAY,GACrEvC,EAAWrH,EAAMtF,OAAO2I,EAAMuG,WAE/B5J,GAAM7C,WACL4J,EAAmBM,GACnBR,EAAQS,cAAcD,KAEtBN,EAAmB9J,GACnB4J,EAAQS,cAAcrK,KAGtB4J,EAAQU,WACRC,EAASC,SAAS,iBAClB9E,EAAe8E,SAAS,qBAAqBD,EAASE,YAAY,gBAEtEb,EAAQc,UAYZ,QAASC,GAAqB/D,GACvBA,EAAMgE,OAAO7H,QAAU6G,EAAQiB,WAC9BkC,EAAWnG,EAAMgE,OAAO7H,OArGhC,GAAIgH,GAAezJ,QAAQmF,QAAQA,EAAQ,GAAGe,cAAc,UACxDd,EAAiBpF,QAAQmF,QAAQA,EAAQ,GAAGe,cAAc,uBAC1DwD,EAAqBtE,EAAeO,WAAW,mBAEnD4D,GAAY,SAASiB,GAClBpF,EAAeqF,OAAOD,IAGzB,IAAIP,GAAWjK,QAAQmF,QAAQC,EAAe,GAAGc,cAAc,iBAE/DJ,GAAMtH,KAAOsH,EAAMuG,WAAa,OAAS,OACzCvG,EAAMuG,WAAavG,EAAMuG,YAAc,aACvCvG,EAAMwG,qBAAuBxG,EAAMwG,sBAAwB,aAC3DxG,EAAM4G,MAAQpD,EACd9F,QAAQC,IAAI,mBAAoBqC,GAEhCA,EAAM6G,QAAU,WACZ,OAAQrD,EAAQU,aAAeV,EAAQsD,UAI3CtD,EAAQwB,YAAYC,QAAQ,SAAStI,GACjC,GAAI/C,GAAOM,QAAQ0D,OAAOjB,IAAUzF,OAAOyF,EAEvC+G,GADD9J,GAAQA,EAAKE,UACOF,EAAKvC,OAAO2I,EAAMuG,YAElB,QAG3B/C,EAAQ0B,YAAY7N,OAAS,SAAS8N,EAAYC,GAC9C,MAAO5H,GAAgB4H,EAAWpF,EAAMwG,qBAAsB,IAGlEhD,EAAQ0B,YAAYrL,QAAU,SAASsL,EAAYC,GAC/C,MAAOvH,GAAiBuH,EAAWpF,EAAMuG,WAAYvG,EAAMnG,UAG/D2J,EAAQ0B,YAAYnL,QAAU,SAASoL,EAAYC,GAC/C,MAAOrH,GAAiBqH,EAAWpF,EAAMuG,WAAYvG,EAAMjG,UAG/DyJ,EAAQ0B,YAAYhH,OAAS,SAASiH,EAAYC,GAC9C,MAAOnH,GAAgBmH,EAAWpF,EAAMuG,WAAYvG,EAAM/F,aAG9DuJ,EAAQ0B,YAAYG,SAAW,SAASF,EAAYC,GAChD,MAAOlL,SAAQoL,YAAYrF,EAAMoF,YAAc7B,EAAQM,SAASqB,KAAgB3B,EAAQM,SAASsB,IAGrG5B,EAAQ+B,SAASN,QAAQ,SAAStI,GAC9B,GAAI6I,GAAStO,OAAOyF,EAAOqD,EAAMuG,YAAY,EAC7C,IAAGf,EAAO1L,UAAW,CACjB,GAAGI,QAAQ0D,OAAO4F,EAAQiC,aAAc,CACpC,GAAIC,GAAgBxO,OAAOsM,EAAQiC,YACnCC,GAAc9K,KAAK4K,EAAO5K,QAC1B8K,EAAcqB,MAAMvB,EAAOuB,SAC3BrB,EAAc9L,KAAK4L,EAAO5L,QAE1B4L,EAASE,EAEb,MAAOF,GAAOxN,SAEd,MAAO,QA4BfgI,EAAM4F,WAAa,SAASC,GACxBS,EAAe9C,EAAQiC,aACtB5L,QAASmG,EAAMnG,QACfE,QAASiG,EAAMjG,QACfE,WAAY+F,EAAM/F,WAClBuI,YAAaqD,IACdlK,KAAKgL,IAQThD,EAAapC,GAAG,mBAAoBgD,GAEpCvE,EAAM0B,IAAI,WAAY,WAClBiC,EAAalC,IAAI,mBAAoB8C,WAQzDpG,EAAOa,UAAU,iBAAkB,iBAAkB,WAAY,SAASsH,EAAgB7M,GACtF,OACIyF,SAAU,IACV0D,QAAS,UACT5C,OACInG,QAAW,OACXE,QAAW,OACXE,WAAc,iBACdsM,WAAc,aACdC,qBAAwB,wBAE5BzG,KAAM,SAASC,EAAOX,EAASY,EAAOuD,EAASC,GAoB3C,QAASmC,GAAWC,GAChBS,EAAe9C,EAAQiC,aACtB5L,QAASmG,EAAMnG,QACfE,QAASiG,EAAMjG,QACfE,WAAY+F,EAAM/F,WAClBuI,YAAaqD,IACdlK,KAAK,SAASjF,GACV8M,EAAQS,cAAc/M,OAAOR,GAAMW,OAAO2I,EAAM3I,SAChDmM,EAAQc,YA3BhB5G,QAAQC,IAAI,gBAAiBqC,GAC7BA,EAAMuG,WAAavG,EAAMuG,YAAc,aAEvC/C,EAAQ0B,YAAY7N,OAAS,SAAS8N,EAAYC,GAC9C,MAAO5H,GAAgB4H,EAAWpF,EAAM3I,OAAQ,IAGpDmM,EAAQ0B,YAAYrL,QAAU,SAASsL,EAAYC,GAC/C,MAAOvH,GAAiBuH,EAAWpF,EAAM3I,OAAQ2I,EAAMnG,UAG3D2J,EAAQ0B,YAAYnL,QAAU,SAASoL,EAAYC,GAC/C,MAAOrH,GAAiBqH,EAAWpF,EAAM3I,OAAQ2I,EAAMjG,UAG3DyJ,EAAQ0B,YAAYhH,OAAS,SAASiH,EAAYC,GAC9C,MAAOnH,GAAgBmH,EAAWpF,EAAM3I,OAAQ2I,EAAM/F,aAe1DoF,EAAQkC,GAAG,QAASqE,GAEpB5F,EAAM0B,IAAI,WAAY,WAClBrC,EAAQoC,IAAI,QAASmE","file":"mdPickers.min.js","sourcesContent":["(function() {\n\"use strict\";\n/* global moment, angular */\n\nvar module = angular.module(\"mdPickers\", [\n\t\"ngMaterial\",\n\t\"ngAnimate\",\n\t\"ngAria\"\n]);\n\nmodule.config([\"$mdIconProvider\", \"mdpIconsRegistry\", function($mdIconProvider, mdpIconsRegistry) {\n\tangular.forEach(mdpIconsRegistry, function(icon, index) {\n\t\t$mdIconProvider.icon(icon.id, icon.url);\n\t});\n}]);\n\nmodule.run([\"$templateCache\", \"mdpIconsRegistry\", function($templateCache, mdpIconsRegistry) {\n\tangular.forEach(mdpIconsRegistry, function(icon, index) {\n\t\t$templateCache.put(icon.url, icon.svg);\n\t});\n}]);\nmodule.constant(\"mdpIconsRegistry\", [\n    {\n        id: 'mdp-chevron-left',\n        url: 'mdp-chevron-left.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    },\n    {\n        id: 'mdp-chevron-right',\n        url: 'mdp-chevron-right.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    },\n    {\n        id: 'mdp-access-time',\n        url: 'mdp-access-time.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/></svg>'\n    },\n    {\n        id: 'mdp-event',\n        url: 'mdp-event.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    }\n]);\nmodule.directive(\"ngMessage\", [\"$mdUtil\", function($mdUtil) {\n   return {\n        restrict: \"EA\",\n        priority: 101,\n        compile: function(element) {\n            var inputContainer = $mdUtil.getClosest(element, \"mdp-time-picker\", true) ||\n                                 $mdUtil.getClosest(element, \"mdp-date-picker\", true);\n            \n            // If we are not a child of an input container, don't do anything\n            if (!inputContainer) return;\n            \n            // Add our animation class\n            element.toggleClass('md-input-message-animation', true);\n            \n            return {};\n        }\n    } \n}]);\n/* global moment, angular */\n\nfunction TimePickerCtrl($scope, $mdDialog, time, autoSwitch, $mdMedia) {\n\tvar self = this;\n    this.VIEW_HOURS = 1;\n    this.VIEW_MINUTES = 2;\n    this.currentView = this.VIEW_HOURS;\n    this.time = moment(time);\n    this.autoSwitch = !!autoSwitch;\n    \n    this.clockHours = parseInt(this.time.format(\"h\"));\n    this.clockMinutes = parseInt(this.time.minutes());\n    \n\t$scope.$mdMedia = $mdMedia;\n\t\n\tthis.switchView = function() {\n\t    self.currentView = self.currentView == self.VIEW_HOURS ? self.VIEW_MINUTES : self.VIEW_HOURS;\n\t};\n    \n\tthis.setAM = function() {\n        if(self.time.hours() >= 12)\n            self.time.hour(self.time.hour() - 12);\n\t};\n    \n    this.setPM = function() {\n        if(self.time.hours() < 12)\n            self.time.hour(self.time.hour() + 12);\n\t};\n    \n    this.cancel = function() {\n        $mdDialog.cancel();\n    };\n\n    this.confirm = function() {\n        $mdDialog.hide(this.time.toDate());\n    };\n}\n\nfunction ClockCtrl($scope) {\n    var TYPE_HOURS = \"hours\";\n    var TYPE_MINUTES = \"minutes\";\n    var self = this;\n    \n    this.STEP_DEG = 360 / 12;\n    this.steps = [];\n    \n    this.CLOCK_TYPES = {\n        \"hours\": {\n            range: 12,\n        },\n        \"minutes\": {\n            range: 60,\n        }\n    }\n    \n    this.getPointerStyle = function() {\n        var divider = 1;\n        switch(self.type) {\n            case TYPE_HOURS:\n                divider = 12;\n                break;\n            case TYPE_MINUTES:\n                divider = 60;\n                break;\n        }  \n        var degrees = Math.round(self.selected * (360 / divider)) - 180;\n        return { \n            \"-webkit-transform\": \"rotate(\" + degrees + \"deg)\",\n            \"-ms-transform\": \"rotate(\" + degrees + \"deg)\",\n            \"transform\": \"rotate(\" + degrees + \"deg)\"\n        }\n    };\n    \n    this.setTimeByDeg = function(deg) {\n        deg = deg >= 360 ? 0 : deg;\n        var divider = 0;\n        switch(self.type) {\n            case TYPE_HOURS:\n                divider = 12;\n                break;\n            case TYPE_MINUTES:\n                divider = 60;\n                break;\n        }  \n        \n        self.setTime(\n            Math.round(divider / 360 * deg)\n        );\n    };\n    \n    this.setTime = function(time, type) {\n        this.selected = time;\n        \n        switch(self.type) {\n            case TYPE_HOURS:\n                if(self.time.format(\"A\") == \"PM\") time += 12;\n                this.time.hours(time);\n                break;\n            case TYPE_MINUTES:\n                if(time > 59) time -= 60;\n                this.time.minutes(time);\n                break;\n        }\n        \n    };\n    \n    this.init = function() {\n        self.type = self.type || \"hours\";\n        switch(self.type) {\n            case TYPE_HOURS:\n                for(var i = 1; i <= 12; i++)\n                    self.steps.push(i);\n                self.selected = self.time.hours() || 0;\n                if(self.selected > 12) self.selected -= 12;\n                    \n                break;\n            case TYPE_MINUTES:\n                for(var i = 5; i <= 55; i+=5)\n                    self.steps.push(i);\n                self.steps.push(0);\n                self.selected = self.time.minutes() || 0;\n                \n                break;\n        }\n    };\n    \n    this.init();\n}\n\nmodule.directive(\"mdpClock\", [\"$animate\", \"$timeout\", function($animate, $timeout) {\n    return {\n        restrict: 'E',\n        bindToController: {\n            'type': '@?',\n            'time': '=',\n            'autoSwitch': '=?'\n        },\n        replace: true,\n        template: '<div class=\"mdp-clock\">' +\n                        '<div class=\"mdp-clock-container\">' +\n                            '<md-toolbar class=\"mdp-clock-center md-primary\"></md-toolbar>' +\n                            '<md-toolbar ng-style=\"clock.getPointerStyle()\" class=\"mdp-pointer md-primary\">' +\n                                '<span class=\"mdp-clock-selected md-button md-raised md-primary\"></span>' +\n                            '</md-toolbar>' +\n                            '<md-button ng-class=\"{ \\'md-primary\\': clock.selected == step }\" class=\"md-icon-button md-raised mdp-clock-deg{{ ::(clock.STEP_DEG * ($index + 1)) }}\" ng-repeat=\"step in clock.steps\" ng-click=\"clock.setTime(step)\">{{ step }}</md-button>' +\n                        '</div>' +\n                    '</div>',\n        controller: [\"$scope\", ClockCtrl],\n        controllerAs: \"clock\",\n        link: function(scope, element, attrs, ctrl) {\n            var pointer = angular.element(element[0].querySelector(\".mdp-pointer\")),\n                timepickerCtrl = scope.$parent.timepicker;\n            \n            var onEvent = function(event) {\n                var containerCoords = event.currentTarget.getClientRects()[0];\n                var x = ((event.currentTarget.offsetWidth / 2) - (event.pageX - containerCoords.left)),\n                    y = ((event.pageY - containerCoords.top) - (event.currentTarget.offsetHeight / 2));\n\n                var deg = Math.round((Math.atan2(x, y) * (180 / Math.PI)));\n                $timeout(function() {\n                    ctrl.setTimeByDeg(deg + 180);\n                    if(ctrl.autoSwitch && [\"mouseup\", \"click\"].indexOf(event.type) !== -1 && timepickerCtrl) timepickerCtrl.switchView();\n                });\n            }; \n            \n            element.on(\"mousedown\", function() {\n               element.on(\"mousemove\", onEvent);\n            });\n            \n            element.on(\"mouseup\", function(e) {\n                element.off(\"mousemove\");\n            });\n            \n            element.on(\"click\", onEvent);\n            scope.$on(\"$destroy\", function() {\n                element.off(\"click\", onEvent);\n                element.off(\"mousemove\", onEvent); \n            });\n        }\n    }\n}]);\n\nmodule.provider(\"$mdpTimePicker\", function() {\n    var LABEL_OK = \"OK\",\n        LABEL_CANCEL = \"Cancel\";\n        \n    this.setOKButtonLabel = function(label) {\n        LABEL_OK = label;\n    };\n    \n    this.setCancelButtonLabel = function(label) {\n        LABEL_CANCEL = label;\n    };\n    \n    this.$get = [\"$mdDialog\", function($mdDialog) {\n        var timePicker = function(time, options) {\n            if(!angular.isDate(time)) time = Date.now();\n            if (!angular.isObject(options)) options = {};\n    \n            return $mdDialog.show({\n                controller:  ['$scope', '$mdDialog', 'time', 'autoSwitch', '$mdMedia', TimePickerCtrl],\n                controllerAs: 'timepicker',\n                clickOutsideToClose: true,\n                template: '<md-dialog aria-label=\"\" class=\"mdp-timepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' +\n                            '<md-dialog-content layout-gt-xs=\"row\" layout-wrap>' +\n                                '<md-toolbar layout-gt-xs=\"column\" layout-xs=\"row\" layout-align=\"center center\" flex class=\"mdp-timepicker-time md-hue-1 md-primary\">' +\n                                    '<div class=\"mdp-timepicker-selected-time\">' +\n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_HOURS }\" ng-click=\"timepicker.currentView = timepicker.VIEW_HOURS\">{{ timepicker.time.format(\"h\") }}</span>:' + \n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_MINUTES }\" ng-click=\"timepicker.currentView = timepicker.VIEW_MINUTES\">{{ timepicker.time.format(\"mm\") }}</span>' +\n                                    '</div>' +\n                                    '<div layout=\"column\" class=\"mdp-timepicker-selected-ampm\">' + \n                                        '<span ng-click=\"timepicker.setAM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() < 12 }\">AM</span>' +\n                                        '<span ng-click=\"timepicker.setPM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() >= 12 }\">PM</span>' +\n                                    '</div>' + \n                                '</md-toolbar>' +\n                                '<div>' +\n                                    '<div class=\"mdp-clock-switch-container\" ng-switch=\"timepicker.currentView\" layout layout-align=\"center center\">' +\n\t                                    '<mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"hours\" ng-switch-when=\"1\"></mdp-clock>' +\n\t                                    '<mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"minutes\" ng-switch-when=\"2\"></mdp-clock>' +\n                                    '</div>' +\n                                    \n                                    '<md-dialog-actions layout=\"row\">' +\n\t                                \t'<span flex></span>' +\n                                        '<md-button ng-click=\"timepicker.cancel()\" aria-label=\"' + LABEL_CANCEL + '\">' + LABEL_CANCEL + '</md-button>' +\n                                        '<md-button ng-click=\"timepicker.confirm()\" class=\"md-primary\" aria-label=\"' + LABEL_OK + '\">' + LABEL_OK + '</md-button>' +\n                                    '</md-dialog-actions>' +\n                                '</div>' +\n                            '</md-dialog-content>' +\n                        '</md-dialog>',\n                targetEvent: options.targetEvent,\n                locals: {\n                    time: time,\n                    autoSwitch: options.autoSwitch\n                },\n                skipHide: true\n            });\n        };\n    \n        return timePicker;\n    }];\n});\n\nmodule.directive(\"mdpTimePicker\", [\"$mdpTimePicker\", \"$timeout\", function($mdpTimePicker, $timeout) {\n    return  {\n        restrict: 'E',\n        require: 'ngModel',\n        transclude: true,\n        template: function(element, attrs) {\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\n            \n            return '<div layout layout-align=\"start start\">' +\n                    '<md-button class=\"md-icon-button\" ng-click=\"showPicker($event)\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + '>' +\n                        '<md-icon md-svg-icon=\"mdp-access-time\"></md-icon>' +\n                    '</md-button>' +\n                    '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\n                        '<input type=\"{{ ::type }}\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\n                    '</md-input-container>' +\n                '</div>';\n        },\n        scope: {\n            \"timeFormat\": \"@mdpFormat\",\n            \"placeholder\": \"@mdpPlaceholder\",\n            \"autoSwitch\": \"=?mdpAutoSwitch\",\n            \"disabled\": \"=?mdpDisabled\"\n        },\n        link: function(scope, element, attrs, ngModel, $transclude) {\n            var inputElement = angular.element(element[0].querySelector('input')),\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\n                inputContainerCtrl = inputContainer.controller(\"mdInputContainer\");\n                \n            $transclude(function(clone) {\n               inputContainer.append(clone); \n            });\n            \n            var messages = angular.element(inputContainer[0].querySelector(\"[ng-messages]\"));\n            \n            scope.type = scope.timeFormat ? \"text\" : \"time\"\n            scope.timeFormat = scope.timeFormat || \"HH:mm\";\n            scope.autoSwitch = scope.autoSwitch || false;\n            \n            scope.$watch(function() { return ngModel.$error }, function(newValue, oldValue) {\n                inputContainerCtrl.setInvalid(!ngModel.$pristine && !!Object.keys(ngModel.$error).length);\n            }, true);\n            \n            // update input element if model has changed\n            ngModel.$formatters.unshift(function(value) {\n                var time = angular.isDate(value) && moment(value);\n                if(time && time.isValid()) \n                    updateInputElement(time.format(scope.timeFormat));\n                else\n                    updateInputElement(null);\n            });\n            \n            ngModel.$validators.format = function(modelValue, viewValue) {\n                return !viewValue || angular.isDate(viewValue) || moment(viewValue, scope.timeFormat, true).isValid();\n            };\n            \n            ngModel.$validators.required = function(modelValue, viewValue) {\n                return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\n            };\n            \n            ngModel.$parsers.unshift(function(value) {\n                var parsed = moment(value, scope.timeFormat, true);\n                if(parsed.isValid()) {\n                    if(angular.isDate(ngModel.$modelValue)) {\n                        var originalModel = moment(ngModel.$modelValue);\n                        originalModel.minutes(parsed.minutes());\n                        originalModel.hours(parsed.hours());\n                        originalModel.seconds(parsed.seconds());\n                        \n                        parsed = originalModel;\n                    }\n                    return parsed.toDate(); \n                } else\n                    return null;\n            });\n            \n            // update input element value\n            function updateInputElement(value) {\n                inputElement[0].value = value;\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\n            }\n            \n            function updateTime(time) {\n                var value = moment(time, angular.isDate(time) ? null : scope.timeFormat, true),\n                    strValue = value.format(scope.timeFormat);\n\n                if(value.isValid()) {\n                    updateInputElement(strValue);\n                    ngModel.$setViewValue(strValue);\n                } else {\n                    updateInputElement(time);\n                    ngModel.$setViewValue(time);\n                }\n                \n                if(!ngModel.$pristine && \n                    messages.hasClass(\"md-auto-hide\") && \n                    inputContainer.hasClass(\"md-input-invalid\")) messages.removeClass(\"md-auto-hide\");\n                \n                ngModel.$render();\n            }\n                \n            scope.showPicker = function(ev) {\n                $mdpTimePicker(ngModel.$modelValue, {\n                    targetEvent: ev,\n                    autoSwitch: scope.autoSwitch\n                }).then(function(time) {\n                    updateTime(time, true);\n                });\n            };\n            \n            function onInputElementEvents(event) {\n                if(event.target.value !== ngModel.$viewVaue)\n                    updateTime(event.target.value);\n            }\n            \n            inputElement.on(\"reset input blur\", onInputElementEvents);\n            \n            scope.$on(\"$destroy\", function() {\n                inputElement.off(\"reset input blur\", onInputElementEvents);\n            })\n        }\n    };\n}]);\n\nmodule.directive(\"mdpTimePicker\", [\"$mdpTimePicker\", \"$timeout\", function($mdpTimePicker, $timeout) {\n    return  {\n        restrict: 'A',\n        require: 'ngModel',\n        scope: {\n            \"timeFormat\": \"@mdpFormat\",\n            \"autoSwitch\": \"=?mdpAutoSwitch\",\n        },\n        link: function(scope, element, attrs, ngModel, $transclude) {\n            scope.format = scope.format || \"HH:mm\";\n            function showPicker(ev) {\n                $mdpTimePicker(ngModel.$modelValue, {\n                    targetEvent: ev,\n                    autoSwitch: scope.autoSwitch\n                }).then(function(time) {\n                    ngModel.$setViewValue(moment(time).format(scope.format));\n                    ngModel.$render();\n                });\n            };\n            \n            element.on(\"click\", showPicker);\n            \n            scope.$on(\"$destroy\", function() {\n                element.off(\"click\", showPicker);\n            });\n        }\n    }\n}]);\n\n/* global moment, angular */\n\nfunction DatePickerCtrl($scope, $mdDialog, $mdMedia, $timeout, currentDate, options) {\n    var self = this;\n\n    this.date = moment(currentDate);\n    this.minDate = options.minDate && moment(options.minDate).isValid() ? moment(options.minDate) : null;\n    this.maxDate = options.maxDate && moment(options.maxDate).isValid() ? moment(options.maxDate) : null;\n    this.displayFormat = options.displayFormat || \"ddd, MMM DD\";\n    this.dateFilter = angular.isFunction(options.dateFilter) ? options.dateFilter : null;\n    this.selectingYear = false;\n    \n    // validate min and max date\n\tif (this.minDate && this.maxDate) {\n\t\tif (this.maxDate.isBefore(this.minDate)) {\n\t\t\tthis.maxDate = moment(this.minDate).add(1, 'days');\n\t\t}\n\t}\n\t\n\tif (this.date) {\n\t\t// check min date\n    \tif (this.minDate && this.date.isBefore(this.minDate)) {\n\t\t\tthis.date = moment(this.minDate);\n    \t}\n    \t\n    \t// check max date\n    \tif (this.maxDate && this.date.isAfter(this.maxDate)) {\n\t\t\tthis.date = moment(this.maxDate);\n    \t}\n\t}\n\t\n\tthis.yearItems = {\n        currentIndex_: 0,\n        PAGE_SIZE: 5,\n        START: (self.minDate ? self.minDate.year() : 1900),\n        END: (self.maxDate ? self.maxDate.year() : 0),\n        getItemAtIndex: function(index) {\n        \tif(this.currentIndex_ < index)\n                this.currentIndex_ = index;\n        \t\n        \treturn this.START + index;\n        },\n        getLength: function() {\n            return Math.min(\n                this.currentIndex_ + Math.floor(this.PAGE_SIZE / 2),\n                Math.abs(this.START - this.END) + 1\n            );\n        }\n    };\n\n    $scope.$mdMedia = $mdMedia;\n    $scope.year = this.date.year();\n\n\tthis.selectYear = function(year) {\n        self.date.year(year);\n        $scope.year = year;\n        self.selectingYear = false;\n        self.animate();\n    };\n    \n    this.showYear = function() { \n        self.yearTopIndex = (self.date.year() - self.yearItems.START) + Math.floor(self.yearItems.PAGE_SIZE / 2);\n        self.yearItems.currentIndex_ = (self.date.year() - self.yearItems.START) + 1;\n        self.selectingYear = true;\n    };\n    \n    this.showCalendar = function() {\n        self.selectingYear = false;\n    };\n\n    this.cancel = function() {\n        $mdDialog.cancel();\n    };\n\n    this.confirm = function() {\n    \tvar date = this.date;\n    \t\n    \tif (this.minDate && this.date.isBefore(this.minDate)) {\n    \t\tdate = moment(this.minDate);\n    \t}\n    \t\n    \tif (this.maxDate && this.date.isAfter(this.maxDate)) {\n    \t\tdate = moment(this.maxDate);\n    \t}  \t\n    \t\n        $mdDialog.hide(date.toDate());\n    };\n    \n    this.animate = function() {\n        self.animating = true;\n        $timeout(angular.noop).then(function() {\n            self.animating = false;\n        })  \n    };\n}\n\nmodule.provider(\"$mdpDatePicker\", function() {\n    var LABEL_OK = \"OK\",\n        LABEL_CANCEL = \"Cancel\",\n        DISPLAY_FORMAT = \"ddd, MMM DD\";\n        \n    this.setDisplayFormat = function(format) {\n        DISPLAY_FORMAT = format;    \n    };\n        \n    this.setOKButtonLabel = function(label) {\n        LABEL_OK = label;\n    };\n    \n    this.setCancelButtonLabel = function(label) {\n        LABEL_CANCEL = label;\n    };\n    \n    this.$get = [\"$mdDialog\", function($mdDialog) {\n        var datePicker = function(currentDate, options) {\n            if (!angular.isDate(currentDate)) currentDate = Date.now();\n            if (!angular.isObject(options)) options = {};\n            \n            options.displayFormat = DISPLAY_FORMAT;\n    \n            return $mdDialog.show({\n                controller:  ['$scope', '$mdDialog', '$mdMedia', '$timeout', 'currentDate', 'options', DatePickerCtrl],\n                controllerAs: 'datepicker',\n                clickOutsideToClose: true,\n                template: '<md-dialog aria-label=\"\" class=\"mdp-datepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' +\n                            '<md-dialog-content layout=\"row\" layout-wrap>' +\n                                '<div layout=\"column\" layout-align=\"start center\">' +\n                                    '<md-toolbar layout-align=\"start start\" flex class=\"mdp-datepicker-date-wrapper md-hue-1 md-primary\" layout=\"column\">' +\n                                        '<span class=\"mdp-datepicker-year\" ng-click=\"datepicker.showYear()\" ng-class=\"{ \\'active\\': datepicker.selectingYear }\">{{ datepicker.date.format(\\'YYYY\\') }}</span>' +\n                                        '<span class=\"mdp-datepicker-date\" ng-click=\"datepicker.showCalendar()\" ng-class=\"{ \\'active\\': !datepicker.selectingYear }\">{{ datepicker.date.format(datepicker.displayFormat) }}</span> ' +\n                                    '</md-toolbar>' + \n                                '</div>' +  \n                                '<div>' + \n                                    '<div class=\"mdp-datepicker-select-year mdp-animation-zoom\" layout=\"column\" layout-align=\"center start\" ng-if=\"datepicker.selectingYear\">' +\n                                        '<md-virtual-repeat-container md-auto-shrink md-top-index=\"datepicker.yearTopIndex\">' +\n                                            '<div flex md-virtual-repeat=\"item in datepicker.yearItems\" md-on-demand class=\"repeated-year\">' +\n                                                '<span class=\"md-button\" ng-click=\"datepicker.selectYear(item)\" md-ink-ripple ng-class=\"{ \\'md-primary current\\': item == year }\">{{ item }}</span>' +\n                                            '</div>' +\n                                        '</md-virtual-repeat-container>' +\n                                    '</div>' +\n                                    '<mdp-calendar ng-if=\"!datepicker.selectingYear\" class=\"mdp-animation-zoom\" date=\"datepicker.date\" min-date=\"datepicker.minDate\" date-filter=\"datepicker.dateFilter\" max-date=\"datepicker.maxDate\"></mdp-calendar>' +\n                                    '<md-dialog-actions layout=\"row\">' +\n                                    \t'<span flex></span>' +\n                                        '<md-button ng-click=\"datepicker.cancel()\" aria-label=\"' + LABEL_CANCEL + '\">' + LABEL_CANCEL + '</md-button>' +\n                                        '<md-button ng-click=\"datepicker.confirm()\" class=\"md-primary\" aria-label=\"' + LABEL_OK + '\">' + LABEL_OK + '</md-button>' +\n                                    '</md-dialog-actions>' +\n                                '</div>' +\n                            '</md-dialog-content>' +\n                        '</md-dialog>',\n                targetEvent: options.targetEvent,\n                locals: {\n                    currentDate: currentDate,\n                    options: options\n                },\n                skipHide: true\n            });\n        };\n    \n        return datePicker;\n    }];\n});\n\nfunction CalendarCtrl($scope) {\n\tvar self = this;\n\tthis.dow = moment.localeData().firstDayOfWeek();\n\t\n    this.weekDays = [].concat(\n        moment.weekdaysMin().slice(\n            this.dow\n        ),\n        moment.weekdaysMin().slice(\n            0, \n            this.dow\n        )\n    );\n    \n    this.daysInMonth = [];\n    \n    this.getDaysInMonth = function() {\n        var days = self.date.daysInMonth(),\n            firstDay = moment(self.date).date(1).day() - this.dow;\n            \n        if(firstDay < 0) firstDay = this.weekDays.length - 1;\n            \n\n        var arr = [];\n        for(var i = 1; i <= (firstDay + days); i++) {\n            var day = null;\n            if(i > firstDay) {\n                day =  {\n                    value: (i - firstDay),\n                    enabled: self.isDayEnabled(moment(self.date).date(i - firstDay).toDate())\n                };\n            }\n            arr.push(day);\n        }\n \n        return arr;\n    };\n    \n    this.isDayEnabled = function(day) {\n        return (!this.minDate || this.minDate <= day) && \n            (!this.maxDate || this.maxDate >= day) && \n            (!self.dateFilter || !self.dateFilter(day));\n    };\n    \n    this.selectDate = function(dom) {\n        self.date.date(dom);\n    };\n\n    this.nextMonth = function() {\n        self.date.add(1, 'months');\n    };\n\n    this.prevMonth = function() {\n        self.date.subtract(1, 'months');\n    };\n    \n    this.updateDaysInMonth = function() {\n        self.daysInMonth = self.getDaysInMonth();\n    };\n    \n    $scope.$watch(function() { return  self.date.unix() }, function(newValue, oldValue) {\n        if(newValue && newValue !== oldValue)\n            self.updateDaysInMonth();\n    })\n    \n    self.updateDaysInMonth();\n}\n\nmodule.directive(\"mdpCalendar\", [\"$animate\", function($animate) {\n    return {\n        restrict: 'E',\n        bindToController: {\n            \"date\": \"=\",\n            \"minDate\": \"=\",\n            \"maxDate\": \"=\",\n            \"dateFilter\": \"=\"\n        },\n        template: '<div class=\"mdp-calendar\">' +\n                    '<div layout=\"row\" layout-align=\"space-between center\">' +\n                        '<md-button aria-label=\"previous month\" class=\"md-icon-button\" ng-click=\"calendar.prevMonth()\"><md-icon md-svg-icon=\"mdp-chevron-left\"></md-icon></md-button>' +\n                        '<div class=\"mdp-calendar-monthyear\" ng-show=\"!calendar.animating\">{{ calendar.date.format(\"MMMM YYYY\") }}</div>' +\n                        '<md-button aria-label=\"next month\" class=\"md-icon-button\" ng-click=\"calendar.nextMonth()\"><md-icon md-svg-icon=\"mdp-chevron-right\"></md-icon></md-button>' +\n                    '</div>' +\n                    '<div layout=\"row\" layout-align=\"space-around center\" class=\"mdp-calendar-week-days\" ng-show=\"!calendar.animating\">' +\n                        '<div layout layout-align=\"center center\" ng-repeat=\"d in calendar.weekDays track by $index\">{{ d }}</div>' +\n                    '</div>' +\n                    '<div layout=\"row\" layout-align=\"start center\" layout-wrap class=\"mdp-calendar-days\" ng-class=\"{ \\'mdp-animate-next\\': calendar.animating }\" ng-show=\"!calendar.animating\" md-swipe-left=\"calendar.nextMonth()\" md-swipe-right=\"calendar.prevMonth()\">' +\n                        '<div layout layout-align=\"center center\" ng-repeat-start=\"day in calendar.daysInMonth track by $index\" ng-class=\"{ \\'mdp-day-placeholder\\': !day }\">' +\n                            '<md-button class=\"md-icon-button md-raised\" aria-label=\"Select day\" ng-if=\"day\" ng-class=\"{ \\'md-accent\\': calendar.date.date() == day.value }\" ng-click=\"calendar.selectDate(day.value)\" ng-disabled=\"!day.enabled\">{{ day.value }}</md-button>' +\n                        '</div>' +\n                        '<div flex=\"100\" ng-if=\"($index + 1) % 7 == 0\" ng-repeat-end></div>' +\n                    '</div>' +\n                '</div>',\n        controller: [\"$scope\", CalendarCtrl],\n        controllerAs: \"calendar\",\n        link: function(scope, element, attrs, ctrl) {\n            var animElements = [\n                element[0].querySelector(\".mdp-calendar-week-days\"),\n                element[0].querySelector('.mdp-calendar-days'),\n                element[0].querySelector('.mdp-calendar-monthyear')\n            ].map(function(a) {\n               return angular.element(a); \n            });\n                \n            scope.$watch(function() { return  ctrl.date.format(\"YYYYMM\") }, function(newValue, oldValue) {\n                var direction = null;\n                \n                if(newValue > oldValue)\n                    direction = \"mdp-animate-next\";\n                else if(newValue < oldValue)\n                    direction = \"mdp-animate-prev\";\n                \n                if(direction) {\n                    for(var i in animElements) {\n                        animElements[i].addClass(direction);\n                        $animate.removeClass(animElements[i], direction);\n                    }\n                }\n            });\n        }\n    }\n}]);\n\nfunction formatValidator(value, format, num) {\n    console.log(\"mdp-datepicker:\", value, format, num);\n    return !value || angular.isDate(value) || moment(value, format, true).isValid();\n}\n\nfunction minDateValidator(value, format, minDate) {\n    var minDate = moment(minDate, \"YYYY-MM-DD\", true);\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\n    \n    return !value || \n            angular.isDate(value) || \n            !minDate.isValid() || \n            date.isSameOrAfter(minDate);\n}\n\nfunction maxDateValidator(value, format, maxDate) {\n    var maxDate = moment(maxDate, \"YYYY-MM-DD\", true);\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\n    \n    return !value || \n            angular.isDate(value) || \n            !maxDate.isValid() || \n            date.isSameOrBefore(maxDate);\n}\n\nfunction filterValidator(value, format, filter) {\n    var date = angular.isDate(value) ? moment(value) :  moment(value, format, true);\n                \n    return !value || \n            angular.isDate(value) || \n            !angular.isFunction(filter) || \n            !filter(date);\n}\n\nfunction requiredValidator(value, ngModel) {\n    return value\n}\n\nmodule.directive(\"mdpDatePicker\", [\"$mdpDatePicker\", \"$timeout\", function($mdpDatePicker, $timeout) {\n    return  {\n        restrict: 'E',\n        require: 'ngModel',\n        transclude: true,\n        template: function(element, attrs) {\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\n            \n            return '<div layout layout-align=\"start start\">' +\n                    '<md-button' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\n                        '<md-icon md-svg-icon=\"mdp-event\"></md-icon>' +\n                    '</md-button>' +\n                    '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\n                        '<input type=\"{{ ::type }}\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\n                    '</md-input-container>' +\n                '</div>';\n        },\n        scope: {\n            \"minDate\": \"=mdpMinDate\",\n            \"maxDate\": \"=mdpMaxDate\",\n            \"dateFilter\": \"=mdpDateFilter\",\n            \"dateFormat\": \"@mdpFormat\",\n            \"acceptableDateFormat\": \"@mdpAcceptableFormat\",\n            \"placeholder\": \"@mdpPlaceholder\",\n            \"noFloat\": \"=mdpNoFloat\",\n            \"openOnClick\": \"=mdpOpenOnClick\",\n            \"disabled\": \"=?mdpDisabled\"\n        },\n        link: {\n            pre: function(scope, element, attrs, ngModel, $transclude) {\n                \n            },\n            post: function(scope, element, attrs, ngModel, $transclude) {\n                var inputElement = angular.element(element[0].querySelector('input')),\n                    inputContainer = angular.element(element[0].querySelector('md-input-container')),\n                    inputContainerCtrl = inputContainer.controller(\"mdInputContainer\");\n                    \n                $transclude(function(clone) {\n                   inputContainer.append(clone); \n                });  \n                \n                var messages = angular.element(inputContainer[0].querySelector(\"[ng-messages]\"));\n                \n                scope.type = scope.dateFormat ? \"text\" : \"date\"\n                scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\n                scope.acceptableDateFormat = scope.acceptableDateFormat || \"YYYY-MM-DD\";\n                scope.model = ngModel;\n                console.log(\"post on element:\", scope);\n                \n                scope.isError = function() {\n                    return !ngModel.$pristine && !!ngModel.$invalid;\n                };\n                \n                // update input element if model has changed\n                ngModel.$formatters.unshift(function(value) {\n                    var date = angular.isDate(value) && moment(value);\n                    if(date && date.isValid()) \n                        updateInputElement(date.format(scope.dateFormat));\n                    else\n                        updateInputElement(null);\n                });\n                \n                ngModel.$validators.format = function(modelValue, viewValue) {\n                    return formatValidator(viewValue, scope.acceptableDateFormat, 1);\n                };\n                \n                ngModel.$validators.minDate = function(modelValue, viewValue) {\n                    return minDateValidator(viewValue, scope.dateFormat, scope.minDate);\n                };\n                \n                ngModel.$validators.maxDate = function(modelValue, viewValue) {\n                    return maxDateValidator(viewValue, scope.dateFormat, scope.maxDate);\n                };\n                \n                ngModel.$validators.filter = function(modelValue, viewValue) {\n                    return filterValidator(viewValue, scope.dateFormat, scope.dateFilter);\n                };\n                \n                ngModel.$validators.required = function(modelValue, viewValue) {\n                    return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\n                };\n                \n                ngModel.$parsers.unshift(function(value) {\n                    var parsed = moment(value, scope.dateFormat, true);\n                    if(parsed.isValid()) {\n                        if(angular.isDate(ngModel.$modelValue)) {\n                            var originalModel = moment(ngModel.$modelValue);\n                            originalModel.year(parsed.year());\n                            originalModel.month(parsed.month());\n                            originalModel.date(parsed.date());\n                            \n                            parsed = originalModel;\n                        }\n                        return parsed.toDate(); \n                    } else\n                        return null;\n                });\n                \n                // update input element value\n                function updateInputElement(value) {\n                    inputElement[0].value = value;\n                    inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\n                }\n                \n                function updateDate(date) {\n                    var value = moment(date, angular.isDate(date) ? null : scope.dateFormat, true),\n                        strValue = value.format(scope.dateFormat);\n    \n                    if(value.isValid()) {\n                        updateInputElement(strValue);\n                        ngModel.$setViewValue(strValue);\n                    } else {\n                        updateInputElement(date);\n                        ngModel.$setViewValue(date);\n                    }\n                    \n                    if(!ngModel.$pristine && \n                        messages.hasClass(\"md-auto-hide\") && \n                        inputContainer.hasClass(\"md-input-invalid\")) messages.removeClass(\"md-auto-hide\");\n    \n                    ngModel.$render();\n                }\n                    \n                scope.showPicker = function(ev) {\n                    $mdpDatePicker(ngModel.$modelValue, {\n                \t    minDate: scope.minDate, \n                \t    maxDate: scope.maxDate,\n                \t    dateFilter: scope.dateFilter,\n                \t    targetEvent: ev\n            \t    }).then(updateDate);\n                };\n                \n                function onInputElementEvents(event) {\n                    if(event.target.value !== ngModel.$viewVaue)\n                        updateDate(event.target.value);\n                }\n                \n                inputElement.on(\"reset input blur\", onInputElementEvents);\n                \n                scope.$on(\"$destroy\", function() {\n                    inputElement.off(\"reset input blur\", onInputElementEvents);\n                });\n            }\n        }\n    };\n}]);\n\n\nmodule.directive(\"mdpDatePicker\", [\"$mdpDatePicker\", \"$timeout\", function($mdpDatePicker, $timeout) {\n    return  {\n        restrict: 'A',\n        require: 'ngModel',\n        scope: {\n            \"minDate\": \"@min\",\n            \"maxDate\": \"@max\",\n            \"dateFilter\": \"=mdpDateFilter\",\n            \"dateFormat\": \"@mdpFormat\",\n            \"acceptableDateFormat\": \"@mdpAcceptableFormat\",\n        },\n        link: function(scope, element, attrs, ngModel, $transclude) {\n            console.log(\"post on link:\", scope);\n            scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\n            \n            ngModel.$validators.format = function(modelValue, viewValue) {\n                return formatValidator(viewValue, scope.format, 2);\n            };\n            \n            ngModel.$validators.minDate = function(modelValue, viewValue) {\n                return minDateValidator(viewValue, scope.format, scope.minDate);\n            };\n            \n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\n                return maxDateValidator(viewValue, scope.format, scope.maxDate);\n            };\n            \n            ngModel.$validators.filter = function(modelValue, viewValue) {\n                return filterValidator(viewValue, scope.format, scope.dateFilter);\n            };\n            \n            function showPicker(ev) {\n                $mdpDatePicker(ngModel.$modelValue, {\n            \t    minDate: scope.minDate, \n            \t    maxDate: scope.maxDate,\n            \t    dateFilter: scope.dateFilter,\n            \t    targetEvent: ev\n        \t    }).then(function(time) {\n                    ngModel.$setViewValue(moment(time).format(scope.format));\n                    ngModel.$render();\n                });\n            };\n            \n            element.on(\"click\", showPicker);\n            \n            scope.$on(\"$destroy\", function() {\n                element.off(\"click\", showPicker);\n            });\n        }\n    }\n}]);\n})();"]}